import { useState as t, useCallback as n, useEffect as e } from "react";
function r(r) {
    return (function (r) {
        if (!E(r)) throw Error("invalid object");
        const i = d(r),
            f = {};
        return (
            Object.keys(i).forEach((r) => {
                const d = r;
                void 0 === v[r] && (v[r] = i[r]);
                const E = void 0 !== v[r] ? v[r] : i[r];
                if (u(E)) throw Error("invalid state");
                const [l, p] = t(c(E)),
                    y = n(() => {
                        const t = v[r];
                        s(t, l) || p(c(t));
                    }, []);
                e(
                    () => (
                        a.addEventListener(d, y),
                        a.dispatchEvent(new Event(d)),
                        () => {
                            a.removeEventListener(d, y);
                        }
                    ),
                    []
                ),
                    (f[r] = [
                        l,
                        (t) => {
                            if ((o(t) && (t = t.call(void 0, l)), u(t)))
                                throw Error("invalid state");
                            s(t, l) ||
                                ((v[r] = c(t)), a.dispatchEvent(new Event(d)));
                        },
                    ]);
            }),
            f
        );
    })({ [r]: "" })[r];
}
function o(t) {
    return "function" == typeof t;
}
function i(t, n) {
    const e = t,
        r = e;
    let i = n;
    const f = v[e];
    if ((o(i) && (i = i.call(void 0, f)), u(i))) throw Error("invalid state");
    s(i, f) || ((v[e] = c(i)), a.dispatchEvent(new Event(r)));
}
function c(t) {
    return JSON.parse(JSON.stringify(t));
}
function f() {
    return d(v);
}
function s(t, n) {
    return JSON.stringify(t) === JSON.stringify(n);
}
function u(t) {
    return void 0 === t || o(t) || null === t || "symbol" == typeof t;
}
const a = new EventTarget(),
    v = {};
function d(t) {
    if ("object" != typeof t)
        throw new TypeError("The argument passed in must be an 'object' type!");
    return c(t);
}
function E(t) {
    return (
        "object" == typeof t &&
        "[object Object]" === Object.prototype.toString.call(t)
    );
}
function l(t) {
    if (!E(t)) throw Error("invalid object");
    const n = d(t),
        e = {};
    return (
        Object.keys(n).forEach((t) => {
            void 0 === v[t] && (v[t] = n[t]), (e[t] = v[t]);
        }),
        e
    );
}
export {
    i as changeState,
    f as getGlobalStates,
    l as initGlobalState,
    r as useGlobalStore,
};
//# sourceMappingURL=index.min.js.map
